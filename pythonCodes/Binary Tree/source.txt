we
are
developers
Back-End
Tem
3
artigos
publicados
com
21057
visualizações
desde
2016
É
um
cientista
de
dados
e
um
desenvolvedor
que
fundou
a
Dataquest

Quando
realizamos
tarefas
de
data
science

é
comum
querermos
utilizar
dados
encontrados
na
Internet

Você
normalmente
poderá
acessar
esses
dados
no
formato

CSV
ou
por
APIs

No
entanto

existem
momentos
em
que
os
dados
que
você
quer
somente
podem
ser
acessados
como
parte
de
uma
página
web

Em
casos
assim

você
pode
utilizar
uma
técnica
chamada
web
scraping
para
obter
os
dados
que
você
queira
da
página
em
um
formato
com
o
qual
você
possa
trabalhar
em
suas
análises

Neste
artigo

vamos
mostrar
como
realizar
web
scraping
utilizando
Python
3
e
a
biblioteca
BeautifulSoup

Nós
vamos
buscar
dados
do
Serviço
Nacional
de
Meteorologia
(em
inglês)

e
depois
analisar
utilizando
a
biblioteca
Pandas

Figura
1:
Site
do
Serviço
Nacional
de
Meteorologia
(EUA)
Quando
visitamos
uma
página

nosso
navegador
faz
uma
solicitação
à
um
servidor
de
Internet

Essa
solicitação
é
chamada
de
solicitação
GET

pois
estamos
recebendo
arquivos
do
servidor

O
servidor
então
envia
arquivos
que
dizem
ao
navegador
como
renderizar
a
página
para
nós

Os
arquivos
se
enquadram
em
alguns
tipos
principais:
Após
nosso
navegador
receber
todos
os
arquivos

ele
renderiza
a
página
e
a
exibe
para
nós

Existem
muitas
coisas
que
acontecem
no
background
para
renderizar
bem
uma
página

mas
não
precisamos
nos
preocupar
com
a
maioria
delas
quando
estamos
realizando
o
web
scraping

Quando
realizamos
o
web
scraping

estamos
interessados
no
conteúdo
principal
da
página

então
olharemos
para
o
HTML

HyperText
Markup
Language
(HTML)
é
uma
linguagem
com
que
as
páginas
web
são
criadas

O
HTML
não
é
uma
linguagem
de
programação

como
o
Python
–
em
vez
disso

é
uma
linguagem
de
marcação
que
diz
ao
navegador
como
exibir
o
conteúdo

O
HTML
permite
que
você
faça
coisas
similares
ao
Microsoft
Word
–
criar
parágrafos

deixar
textos
em
negrito
etc

Por
não
ser
uma
linguagem
de
programação

o
HTML
nem
se
aproxima
da
complexidade
do
Python

Vamos
fazer
fazer
um
rápido
tour
pelo
HTML
para
que
possamos
saber
o
suficiente
para
fazer
o
web
scraping
de
maneira
eficiente

O
HTML
é
formado
por
elementos
chamados
tags

A
tag
mais
básica
é
<HTML>

Essa
tag
diz
ao
navegador
que
tudo
dentro
dela
é
HTML

Podemos
criar
um
documento
HTML
simples
utilizando
somente
essa
tag

Ainda
não
adicionamos
conteúdo
à
página

então

se
visualizássemos
nosso
documento
HTML
em
um
navegador

não
veríamos
nada
além
de:

Dentro
da
tag
html

nós
colocamos
outras
duas
tags

<head>
e
<body>

O
conteúdo
principal
da
página
vai
dentro
da
tag
<body>

A
tag
<head>
contém
dados
sobre
o
título
da
página
e
outras
informações
que
normalmente
não
são
úteis
ao
web
scraping

Nós
ainda
não
temos
conteúdo
em
nossa
página
(ele
vai
dentro
da
tag
body)

então
ainda
não
vemos
nada:

Você
deve
ter
notado
que
nós
colocamos
head
e
 body
dentro
de
html

Em
html

as
tags
são
aninhadas
e
podem
aparecer
dentro
de
outras
tags

Agora

nós
vamos
adicionar
nosso
primeiro
conteúdo
à
página

usando
a
tag
“p”

A
tag
“p”
define
um
parágrafo

e
qualquer
texto
dentro
dela
é
exibido
em
um
parágrafo
separado

Aqui
está
como
vai
ficar:

As
tags
têm
os
nomes
normalmente
utilizados
de
acordo
com
sua
posição
em
relação
a
outras
tags

Nós
também
podemos
adicionar
propriedades
às
tags
HTML
para
mudar
seus
comportamentos:
E
aqui
está
como
vai
aparecer
no
navegador:

No
exemplo
acima

nós
adicionamos
duas
tags
a

As
tags
a
são
links

e
dizem
ao
navegador
para
renderizar
uma
outra
página

A
propriedade
href
determina
para
onde
o
link
vai

a
e
p
são
tags
extremamente
comuns

Aqui
estão
outras:
Para
uma
lista
completa
de
tags

clique
aqui

Antes
de
seguirmos
para
o
web
scraping

vamos
aprender
as
propriedades
class
e
id

Essas
propriedades
dão
nomes
aos
elementos
HTML

e
os
tornam
mais
fáceis
de
interagir
quando
estamos
fazendo
o
scraping

Cada
elemento
pode
ter
várias
classes

e
uma
classe
pode
ser
compartilhada
entre
elementos

Cada
elemento
pode
ter
apenas
um 
id

e
um
id
pode
aparecer
somente
uma
vez
na
página

Classes
e
ids
são
opcionais
e
nem
todos
os
elementos
as
terão

Nós
podemos
adicionar
classes
ao
nosso
exemplo:
Aqui
está
como
vai
ficar:

Como
você
pode
ver

adicionar
classes
não
altera
como
as
tags
são
renderizadas

A
primeira
coisa
que
precisamos
fazer
para
realizar
o
web
scrap
é
baixar
a
página

Podemos
baixar
as
páginas
utilizando
a
biblioteca
requests
do
Python

A
biblioteca
requests
fará
uma
solicitação
GET
ao
servidor

que
fará
o
download
dos
conteúdos
HTML
da
página
solicitada
para
nós

Existem
vários
tipos
de
solicitação
diferentes
que
podemos
realizar
utilizando
a
biblioteca
requests
–
GET
é
apenas
um
deles

Se
você
quer
aprender
mais
sobre
isso
 
acesse
este
link

Vamos
tentar
baixar
um
web
site
simples

como
http://dataquestio
github
io/web-scraping-pages/simple
html

Primeiro

precisamos
baixá-lo
utilizando
o
método
requests
get

<Response
[200]>
Após
executar
nossa
solicitação

nós
receberemos
um
objeto
Response

Esse
objeto
tem
uma
propriedade
status_code
que
indica
se
a
página
foi
baixada
com
sucesso

200
Um
status_code
com
resultado
200
significa
que
a
página
foi
baixada
com
sucesso

Nós
não
vamos
nos
aprofundar
no
códigos
dos
estados

mas
um
estado
que
comece
com
2
normalmente
indica
sucesso

e
um
código
que
comece
com
4
ou
5
indica
erro

Nós
podemos
exibir
o
conteúdo
HTML
de
uma
página
utilizando
a
propriedade
content

Como
você
pode
ver
acima

agora
nós
baixamos
um
documento
HTML

Nós
podemos
utilizar
a
biblioteca
BeautifulSoup
para
analisar
esse
documento
e
extrair
o
texto
da
tag
p

Primeiro

nós
temos
que
importar
a
biblioteca
e
criar
uma
instância
da
classe
BeautifulSoup
para
analisar
o
documento

Agora

nós
podemos
exibir
o
conteúdo
HTML
da
página

formatado
corretamente

utilizando
o
método
prettify
no
objeto
BeautifulSoup

Como
todas
as
tags
estão
aninhadas

podemos
nos
movimentar
pela
estrutura
um
nível
por
vez

Podemos
selecionar
primeiro
os
elementos
dos
níveis
superiores
da
página
utilizando
a
propriedade
children
do
soup

Note
que
children
retorna
um
gerador
de
listas

para
que
possamos
chamar
sua
função
list

Acima

vemos
que
existem
duas
tags
no
nível
superior
da
página
–
a
tag
inicial
<!DOCTYPE
html>
e
a
tag
<html>

Existe
também
um
caractere
de
nova
linha
(\n)
na
lista

Vamos
ver
o
tipo
de
cada
elemento
da
lista:
Como
você
pode
ver

todos
os
itens
são
objetos
BeautiSoup

O
primeiro
é
o
objeto
Doctype

que
contém
informações
sobre
o
tipo
de
documento

O
segundo
é
o
NavigableString

que
representa
o
texto
encontrado
no
documento
HTML

O
item
final
é
um
objeto
Tag

que
contém
outras
tags
aninhadas

O
tipo
de
objeto
mais
importante

e
com
o
qual
nós
vamos
trabalhar
com
mais
frequência

é
o
objeto
Tag

O
objeto
Tag
nos
permite
navegar
pelo
documento
HTML
e
extrair
outras
tags
e
textos

Você
pode
aprender
mais
sobre
os
vários
objetos
da
biblioteca
BeautifulSoup
aqui

Agora
nós
podemos
selecionar
a
tag
html
e
suas
filhas
pelo
terceiro
item
da
lista:
Cada
item
da
lista
retornado
pelo
objeto
children
também
é
um
objeto
de
BeautifulSoup

então
nós
também
podemos
chamar
o
método
children
no
html

Agora

nós
podemos
encontrar
as
filhas
dentro
da
tag
html:
